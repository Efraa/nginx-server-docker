version: '3'

services:
  nginx-proxy:
    restart: unless-stopped
    image: jwilder/nginx-proxy:alpine
    container_name: ${APP_NAME}_PROXY_SERVER
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - server
      - db_admin
    networks:
      - app

  server:
    image: nginx:alpine
    container_name: ${APP_NAME}_SERVER
    volumes:
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./config/ssl:/etc/ssl
      - ./app:/var/www/html/public
      - ./config/nginx/default.template.conf:/etc/nginx/conf.d/default.template
    ports:
      - 80
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - VIRTUAL_HOST=${NGINX_HOST}
    command: /bin/sh -c "envsubst '$$NGINX_HOST' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    restart: always
    depends_on:
      - php
      - db
    networks:
      - app

  php:
    image: nanoninja/php-fpm:${PHP_VERSION}
    container_name: ${APP_NAME}_PHP
    restart: always
    volumes:
      - ./config/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./app:/var/www/html/public
    networks:
      - app

  composer:
    image: composer
    container_name: ${APP_NAME}_COMPOSER
    volumes:
      - ./app:/app
    command: install
    networks:
      - app

  node:
    image: node
    user: node
    working_dir: /home/node/app
    container_name: ${APP_NAME}_NODE
    volumes:
      - ./app${APP_THEME_PATH}:/home/node/app
    command: npm install && npm run watch

  aws:
    build:
      context: ./config/aws
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_AWS
    command: sh -c "npm start"

  db_admin:
    image: phpmyadmin/phpmyadmin
    container_name: ${APP_NAME}_MY_SQL_ADMIN
    ports:
      - 80
    environment:
      - MYSQL_ROOT_USER=${DB_USER}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - PMA_ARBITRARY=1
      - PMA_HOST=${DB_HOST}
      - VIRTUAL_HOST=db.${NGINX_HOST}
    restart: always
    depends_on:
      - db
    networks:
      - app

  db:
    image: mysql:${MYSQL_VERSION}
    container_name: ${APP_NAME}_DB
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_USER: ${DB_USER}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - ./data/db:/var/lib/mysql
    networks:
      - app

networks:
  app:
    driver: bridge